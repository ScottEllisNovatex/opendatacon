name: opendatacon workflow

on:
  push:
    branches:
      - '**' # matches every branch
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'

jobs:
  opendatacon-native:
  
    strategy:
      fail-fast: false
      
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build-type: [Release,Debug]
        bits: 64
            
        include:
          - os: windows-latest
            build-type: Release
            bits: 32
          - os: windows-latest
            build-type: Debug
            bits: 32

    runs-on: ${{ matrix.os }}

    env:
      BUILD_TYPE: ${{ matrix.build-type }}
      INSTALL_PREFIX: ${{github.workspace}}/build/install
      LOG_LVL: error

    steps:
    - if ${{ matrix.bits == 32 }}
      name: Set 32-bit env
      run: |
        echo 'BITPLAT=x86' >> $GITHUB_ENV
        echo 'BITGEN=-AWin32' >> $GITHUB_ENV
        
    - if ${{ matrix.bits == 64 }}
      name: Set 64-bit env
      run: |
        echo 'BITPLAT=x64' >> $GITHUB_ENV
        echo 'BITGEN=-Ax64' >> $GITHUB_ENV
      
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - if: contains(matrix.os,'macos')
      name: Setup MacOS Environment
      run: |
        brew install libmodbus socat openssl
        echo 'TOOLCHAIN_OPT=-DPACKAGE_DNP3=OFF -DPACKAGE_LIBMODBUS=OFF -DPACKAGE_PYTHON=OFF -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl@3' >> $GITHUB_ENV
        echo 'BINDIR=bin/' >> $GITHUB_ENV

    - if: contains(matrix.os,'ubuntu')
      name: Setup Ubuntu Environment
      run: |
        sudo apt-get install -y libmodbus-dev libssl-dev socat
        echo 'SYSVER_OPT=-DCMAKE_SYSTEM_VERSION=generic' >> $GITHUB_ENV
        echo 'BINDIR=bin/' >> $GITHUB_ENV
    
    - if: contains(matrix.os,'windows')
      name: Setup Windows Environment
      run: |
        If (-not (Test-Path C:\libmodbus\libmodbus)){
          Invoke-WebRequest -OutFile libmodbus.zip "https://www.dropbox.com/s/iqf95y9x1x4ol36/libmodbus.zip?dl=1"
          7z x -y libmodbus.zip
          New-Item C:\libmodbus -ItemType Directory
          Move-Item .\libmodbus C:\libmodbus\libmodbus
        }
        #hack because debug lib aint available!
        Copy-Item -Path ${{github.workspace}}/Code/Ports/PyPort/${{env.BITPLAT}}/python37_d.lib -Destination C:/hostedtoolcache/windows/Python/3.7.9/${{env.BITPLAT}}/libs/
        echo 'TOOLCHAIN_OPT=-G"Visual Studio 16 2019" ${{env.BITGEN]}} -DCMAKE_CONFIGURATION_TYPES=${{env.BUILD_TYPE}} -DMODBUS_HOME=c:\libmodbus\libmodbus\windows${{matrix.bits}} -DPYTHON_HOME=C:\hostedtoolcache\windows\Python\3.7.9\${{env.BITPLAT}}' >> $env:GITHUB_ENV

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_PREFIX}} ${{env.TOOLCHAIN_OPT}} ${{env.SYSVER_OPT}} -DFULL=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 8

    - name: Package
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target package

    - name: Install
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install

    - name: Test
      if: ${{ !contains(github.ref, 'tag') }}
      run: |
        ${{github.workspace}}/build/install/${{env.BINDIR}}ODC_tests ${{env.LOG_LVL}} -d yes
        ${{github.workspace}}/build/install/${{env.BINDIR}}DNP3Port_tests ${{env.LOG_LVL}} -d yes
        ${{github.workspace}}/build/install/${{env.BINDIR}}SimPort_tests -d yes
        ${{github.workspace}}/build/install/${{env.BINDIR}}MD3Port_tests ${{env.LOG_LVL}} -d yes
        ${{github.workspace}}/build/install/${{env.BINDIR}}CBPort_tests ${{env.LOG_LVL}} -d yes
        ${{github.workspace}}/build/install/${{env.BINDIR}}PyPort_tests ${{env.LOG_LVL}} -d yes
        ${{github.workspace}}/build/install/${{env.BINDIR}}Integration_tests ${{env.LOG_LVL}} -d yes
    
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: installers
        path: |
          ${{github.workspace}}/build/opendatacon-*.*.*-*-*-*-*-*.sh
          ${{github.workspace}}/build/opendatacon-*.*.*-*-*-*-*-*.exe

  opendatacon-docker:

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build-type: [Release,Debug]
        docker: ['library/oraclelinux:7.6']
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.docker }}

    env:
      BUILD_TYPE: ${{ matrix.build-type }}
      INSTALL_PREFIX: ${{github.workspace}}/build/install
      LOG_LVL: error
      BINDIR: bin/

    steps:
    - name: Start run wrapper
      run: echo '#!/bin/bash' >> $HOME/run.sh

    - if: contains(matrix.docker, 'oracle')
      name: Setup OEL7 Environment
      continue-on-error: true
      run: |
        yum install -y oracle-softwarecollection-release-el7
        /usr/bin/ol_yum_configure.sh
        yum install -y scl-utils glibc-devel iso-codes redhat-rpm-config libmicrohttpd make devtoolset-8-gcc-c++ cmake3 file openssl11 openssl11-devel openssl11-static
        ln -s /usr/bin/cmake3 /bin/cmake
        mkdir -p /opt/openssl-root
        ln -s /usr/include/openssl11 /opt/openssl-root/include
        ln -s /usr/lib64/openssl11 /opt/openssl-root/lib
        #Extras that aren-t yum-able
        curl -O https://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/l/libmodbus-devel-3.0.8-1.el7.x86_64.rpm
        curl -O https://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/l/libmodbus-3.0.8-1.el7.x86_64.rpm
        rpm -i libmodbus-3.0.8-1.el7.x86_64.rpm
        rpm -i libmodbus-devel-3.0.8-1.el7.x86_64.rpm    
        # To get Python3.6 we need scl-util-build tools
        curl -O http://public-yum.oracle.com/repo/OracleLinux/OL7/optional/developer/x86_64/getPackage/scl-utils-build-20130529-19.el7.x86_64.rpm
        rpm -i scl-utils-build-20130529-19.el7.x86_64.rpm
        curl -O https://public-yum.oracle.com/repo/OracleLinux/OL7/optional/latest/x86_64/getPackage/libmicrohttpd-devel-0.9.33-2.el7.x86_64.rpm
        rpm -i libmicrohttpd-devel-0.9.33-2.el7.x86_64.rpm
        yum install -y rh-python36 rh-python36-python-devel rh-git218
        echo 'TOOLCHAIN_OPT=-DPYTHON_HOME=/opt/rh/rh-python36/root/usr -DOPENSSL_ROOT_DIR=/opt/openssl-root -DADD_LIBS=z' >> $GITHUB_ENV
        echo 'SYSVER_OPT=-DCMAKE_SYSTEM_VERSION=oel7' >> $GITHUB_ENV
        echo 'source scl_source enable rh-python36' >> $HOME/run.sh
        echo 'source scl_source enable devtoolset-8' >> $HOME/run.sh
        echo 'source scl_source enable rh-git218' >> $HOME/run.sh
        echo '#!/bin/bash' >> /bin/git
        echo "$HOME/run.sh git \"\$@\"" >> /bin/git
        chmod +x /bin/git

    - name: Finish run wrapper
      run: |
        echo 'exec "$@"' >> $HOME/run.sh
        chmod +x $HOME/run.sh
    
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Configure CMake
      run: $HOME/run.sh cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_PREFIX}} ${{env.TOOLCHAIN_OPT}} ${{env.SYSVER_OPT}} -DFULL=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 8

    - name: Package
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target package

    - name: Install
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install

    - name: Test
      if: ${{ !contains(github.ref, 'tag') }}
      run: |
        ${{github.workspace}}/build/install/${{env.BINDIR}}ODC_tests ${{env.LOG_LVL}} -d yes
        ${{github.workspace}}/build/install/${{env.BINDIR}}DNP3Port_tests ${{env.LOG_LVL}} -d yes
        ${{github.workspace}}/build/install/${{env.BINDIR}}SimPort_tests -d yes
        ${{github.workspace}}/build/install/${{env.BINDIR}}MD3Port_tests ${{env.LOG_LVL}} -d yes
        ${{github.workspace}}/build/install/${{env.BINDIR}}CBPort_tests ${{env.LOG_LVL}} -d yes
        echo 'Skipping: ${{github.workspace}}/build/install/${{env.BINDIR}}PyPort_tests ${{env.LOG_LVL}} -d yes'
        ${{github.workspace}}/build/install/${{env.BINDIR}}Integration_tests ${{env.LOG_LVL}} -d yes
        
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: installers
        path: |
          ${{github.workspace}}/build/opendatacon-*.*.*-*-*-*-*-*.sh
          ${{github.workspace}}/build/opendatacon-*.*.*-*-*-*-*-*.sh
          ${{github.workspace}}**opendatacon-*.*.*-*-*-*-*-*.sh
            
  opendatacon-deploy:
    if: contains(github.ref, 'tag')
    needs: [opendatacon-native,opendatacon-docker]
    runs-on: macOS-latest
    steps:
      - name: Download Installers
        uses: actions/download-artifact@v2
        with:
          name: installers
          
      - name: Print Artifacts
        run: ls -alh
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            TODO:
            get tag body and put it here
          draft: true
          prerelease: false
        
        
    
    
