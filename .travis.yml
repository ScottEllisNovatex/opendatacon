#TODO: add socat dep for when dnp3 tests work

language: cpp

git:
  depth: false #shallow clone causes problem with tags
  
addons:
  apt:
    update: true

os:
  - linux
#  - osx

compiler:
  - gcc
#  - clang

env:
  - BUILD_CONFIG=Release
#  - BUILD_CONFIG=Debug
  
matrix:
  include: #extra matrix entries for docker builds
    #Rpi Release
#    - env: BUILD_CONFIG=Release DOCKER_BUILD=Rpi
#      services:
#        - docker
    #Rpi Debug
#    - env: BUILD_CONFIG=Debug DOCKER_BUILD=Rpi
#      services:
#        - docker
    #OEL7 Release
    - env: BUILD_CONFIG=Release DOCKER_BUILD=OEL
      services:
        - docker
    #OEL7 Debug
#    - env: BUILD_CONFIG=Debug DOCKER_BUILD=OEL
#      services:
#        - docker
    #i686 Release
#    - env: BUILD_CONFIG=Release DOCKER_BUILD=i386
#      services:
#        - docker
    #i686 Debug
#    - env: BUILD_CONFIG=Debug DOCKER_BUILD=i386
#      services:
#        - docker
  exclude:
    #Travis docs say on osx gcc is an alias for clang anyway
    - os: osx
      compiler: clang

branches:
  only:
    - develop
    - master
    - /^release\/.*$/
    - /^[0-9]+\.[0-9]+\.[0-9]+.*$/
    - /^feature\/.*$/

dist: xenial

install:
  - export SRC_DIR=$(pwd)
  - mkdir -p build/install && cd build
  - export INSTALL_PREFIX=$(pwd)/install
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew install libmodbus libmicrohttpd socat
      export TOOLCHAIN_OPT="-DPACKAGE_DNP3=OFF -DPACKAGE_LIBMICROHTTPD=OFF -DPACKAGE_LIBMODBUS=OFF -DPACKAGE_PYTHON=OFF"
    elif [ -z "$DOCKER_BUILD" ]; then
      # Not a docker build, just normal linux
      sudo apt-get install -y libmodbus-dev libmicrohttpd-dev socat libc++-dev libc++abi-dev python3.5 python3.5-dev
      export SYSVER_OPT="-DCMAKE_SYSTEM_VERSION=generic"
    fi
  - |
    if [ "$DOCKER_BUILD" == "Rpi" ]; then
      # Install qemu-static and the arm cross compiler into the travis host
      #
      sudo apt-get install -y qemu-user qemu-user-static g++-arm-linux-gnueabihf
      #
      # Run the docker image and keep the returned container name for use in exec calls.
      # Run detatched, the volume command is -v hostdir:containerdir, -rm indicates cleanup on exit unnamed vols, 
      # -ti maintain a terminal, the docker image is jessie:latest
      DOCK=$(docker run -d -v $(pwd):/mnt/build -v /usr/bin/qemu-arm-static:/usr/bin/qemu-arm-static --rm -ti raspbian/jessie:latest)
      # Install the arm versions of dependencies into the QEMU user image
      docker exec -i $DOCK sh -c "apt-get update && apt-get install -y libmodbus-dev libmicrohttpd-dev socat psmisc libc6-dev" 
      docker exec -i $DOCK sh -c "apt-get install -y python3.4 python3.4-dev" 
      mkdir sysroot
      # Copy headers and libs to sysroot from within the docker image
      docker exec -i $DOCK sh -c '
        mkdir -p /mnt/build/sysroot$(dirname /usr/include/*/*/pyconfig.h)
        cp -a /usr/include/*/*/pyconfig.h /mnt/build/sysroot$(dirname /usr/include/*/*/pyconfig.h)
        cp -a /usr/include/microhttpd.h /mnt/build/sysroot/usr/include/
        cp -a /usr/include/modbus /mnt/build/sysroot/usr/include/
        cp -a /usr/include/python* /mnt/build/sysroot/usr/include/
        cp -a /usr/lib /mnt/build/sysroot/usr/
        cp -a /lib* /mnt/build/sysroot/
      '
      # make symlink so absolute paths work within docker
      docker exec -i $DOCK mkdir -p $(dirname $SRC_DIR)
      docker exec -i $DOCK ln -s /mnt $SRC_DIR
      # replace ldd with docker wrapper (so BundleUtilities might work)
      sudo ln -sf $SRC_DIR/lddrunwrapper.pl $(which ldd) 
      # Export a bunch of defines to travis to use in the build and run phases of the script section
      export SYSROOT=$(pwd)/sysroot/
      export RUN="docker exec --interactive --workdir /mnt/build $DOCK"
      export STOP="docker stop $DOCK"
      export TOOLCHAIN_OPT="-DCMAKE_TOOLCHAIN_FILE=../rpi-toolchain.cmake -DCMAKE_CROSSCOMPILING_EMULATOR=$SRC_DIR/runwrapper"
    fi
  - |
    if [ "$DOCKER_BUILD" == "OEL" ]; then
      DOCK=$(docker run -d -v $(pwd):/mnt/build --rm -ti library/oraclelinux:7.6)
      docker exec -i $DOCK sh -c '
        yum install -y oracle-softwarecollection-release-el7
        /usr/bin/ol_yum_configure.sh
        yum repolist
        yum install -y scl-utils glibc-devel iso-codes redhat-rpm-config libmicrohttpd
        
        # load dependencies into docker image so that tests can be run
        curl -O http://packages.psychotic.ninja/7/plus/x86_64/RPMS//libmodbus-devel-3.0.6-2.el7.psychotic.x86_64.rpm
        curl -O http://packages.psychotic.ninja/7/plus/x86_64/RPMS//libmodbus-3.0.6-2.el7.psychotic.x86_64.rpm
        rpm -i libmodbus-3.0.6-2.el7.psychotic.x86_64.rpm
        rpm -i libmodbus-devel-3.0.6-2.el7.psychotic.x86_64.rpm     
        # To get Python3.6 we need scl-util-build tools.
        curl -O http://public-yum.oracle.com/repo/OracleLinux/OL7/optional/developer/x86_64/getPackage/scl-utils-build-20130529-19.el7.x86_64.rpm
        rpm -i scl-utils-build-20130529-19.el7.x86_64.rpm
        curl -O https://public-yum.oracle.com/repo/OracleLinux/OL7/optional/latest/x86_64/getPackage/libmicrohttpd-devel-0.9.33-2.el7.x86_64.rpm
        rpm -i libmicrohttpd-devel-0.9.33-2.el7.x86_64.rpm
        
        yum install -y rh-python36 rh-python36-python-devel
        python3 --version
      '
      sudo pip install gdown
      gdown "https://drive.google.com/uc?export=download&id=1GXu7aRCGviXEA3RM5slDKIC8yGIr4KW3"
      tar xzf x86_64-RHEL65-linux-gnu.tar.gz
      export EL7_CC=$(pwd)/x86_64-RHEL65-linux-gnu/bin/x86_64-RHEL65-linux-gnu-gcc
      export EL7_CXX=$(pwd)/x86_64-RHEL65-linux-gnu/bin/x86_64-RHEL65-linux-gnu-g++ 
      mkdir -p sysroot/opt/rh/rh-python36/root
      docker exec -i $DOCK cp -a /usr /mnt/build/sysroot/
      docker exec -i $DOCK cp -a /lib* /mnt/build/sysroot/
      #docker exec -i $DOCK ls -l /opt/rh/rh-python36/root/usr/lib64/libpython* 
      docker exec -i $DOCK cp -a /opt/rh/rh-python36/root/usr /mnt/build/sysroot/opt/rh/rh-python36/root/
      docker exec -i $DOCK mkdir -p $(dirname $SRC_DIR)
      docker exec -i $DOCK ln -s /mnt $SRC_DIR
      ls -l sysroot/opt/rh/rh-python36/root/usr/lib64/*.so
      sudo ln -sf $SRC_DIR/lddrunwrapper.pl $(which ldd)
      export SYSROOT=$(pwd)/sysroot/
      export RUN="docker exec --interactive --workdir /mnt/build $DOCK"
      export STOP="docker stop $DOCK"
      export TOOLCHAIN_OPT="-DCMAKE_TOOLCHAIN_FILE=../el7-toolchain.cmake -DCMAKE_CROSSCOMPILING_EMULATOR=$SRC_DIR/runwrapper -DPYTHON_HOME=$SYSROOT/opt/rh/rh-python36/root/usr"
    fi
  - |
    if [ "$DOCKER_BUILD" == "i386" ]; then
      sudo dpkg --add-architecture i386
      sudo apt-get update
      sudo apt-get install -y lib32stdc++-5-dev libstdc++-5-dev:i386 libmodbus-dev:i386 libmicrohttpd-dev:i386 python3.5-minimal:i386 python3.5:i386 python3.5-dev:i386
      DOCK=$(docker run -d -v $(pwd):/mnt/build --rm -ti i386/ubuntu:xenial)
      docker exec -i $DOCK mkdir -p $(dirname $SRC_DIR)
      docker exec -i $DOCK ln -s /mnt $SRC_DIR
      export RUN="docker exec --interactive --workdir /mnt/build $DOCK"
      export STOP="docker stop $DOCK"
      export TOOLCHAIN_OPT="-DCMAKE_TOOLCHAIN_FILE=../i386-toolchain.cmake -DCMAKE_CROSSCOMPILING_EMULATOR=$SRC_DIR/runwrapper"
    fi

script:
  - cmake -DFULL=ON -DCMAKE_BUILD_TYPE=$BUILD_CONFIG -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX $TOOLCHAIN_OPT $SYSVER_OPT ..
  - make -j3
  - make package
  - make install
  - $RUN install/bin/ODC_tests -d yes
  - $RUN install/bin/DNP3Port_tests -d yes
  - $RUN install/bin/MD3Port_tests error -d yes
  - $RUN install/bin/CBPort_tests error -d yes
  - $RUN install/bin/PyPort_tests error -d yes
  - $STOP

deploy:
  provider: releases
  api_key:
    secure:    15MT0ZY2lVjvl7cdz+h6RFVTIYpFHuMsNAoIwJwI4iLQdj9ybdq4t9VrqkMZ7THlhgoYXYJKbXmPJmmt8/s1x5tktkbhdu2AU3e0sOYluO8ciBUvBUt5Jak6DAZB6Anjvj/tQqJb5nldnAfZmgnK/5A1Qyn33GBpnb6j2W4hiINR88zPMNpk0q2MF2VKdcFDLgNgbwDgfwEKcWbuxNJ0/g6aJDfS6aSyqPnAX8S/fS0arJmdMwIiAiiVKLBtyD5L6PVhbeP+pPaFD+uEuB+hSyO2tTEl827J78Fe4PgWkmd6xuTkCcObvK90vOv+1sXHA+2mIUbpvceREtM6E2uiofTzhEvoNPd4MYbmk9EMbmofsjorM5807F/Lx3yT7bcn2SjFMbDT7KSvFXLFD2HPLURHKFQ7cveYU+4KofVNhR8jWSOgDYljIskLUrycaysKqs2LD+sgBL9j/9O8HZTJx0nG5juBuHZcKon775T097CDMJFu9GbEw808GDcmX85dZDg1xlldNZAtB1CBw+kYrsApqSv8QWeVSANsNpJf9IvdszQRaLjvalKohDLEA7M1QRcaDpjXzTMz3+bqEokjUgmbLSlzjxuWoMv5PfRZHXPJDBVPnECyoXbF8+b89xHQgLUnr598S3uZEWNB2BcSEky2qjoaUqeJQeeD/AUDY1Y=
  file_glob: true
  file: opendatacon-*.*.*-*-*-*-*-*.sh
  name: "opendatacon ${TRAVIS_TAG}"
  skip_cleanup: true
  on:
    tags: true
    compiler: gcc
    
  # Upload testing log  files for all builds - ideally only when a build fails. Searches recursively for all .log files.
  provider: releases
  api_key:
    secure:    15MT0ZY2lVjvl7cdz+h6RFVTIYpFHuMsNAoIwJwI4iLQdj9ybdq4t9VrqkMZ7THlhgoYXYJKbXmPJmmt8/s1x5tktkbhdu2AU3e0sOYluO8ciBUvBUt5Jak6DAZB6Anjvj/tQqJb5nldnAfZmgnK/5A1Qyn33GBpnb6j2W4hiINR88zPMNpk0q2MF2VKdcFDLgNgbwDgfwEKcWbuxNJ0/g6aJDfS6aSyqPnAX8S/fS0arJmdMwIiAiiVKLBtyD5L6PVhbeP+pPaFD+uEuB+hSyO2tTEl827J78Fe4PgWkmd6xuTkCcObvK90vOv+1sXHA+2mIUbpvceREtM6E2uiofTzhEvoNPd4MYbmk9EMbmofsjorM5807F/Lx3yT7bcn2SjFMbDT7KSvFXLFD2HPLURHKFQ7cveYU+4KofVNhR8jWSOgDYljIskLUrycaysKqs2LD+sgBL9j/9O8HZTJx0nG5juBuHZcKon775T097CDMJFu9GbEw808GDcmX85dZDg1xlldNZAtB1CBw+kYrsApqSv8QWeVSANsNpJf9IvdszQRaLjvalKohDLEA7M1QRcaDpjXzTMz3+bqEokjUgmbLSlzjxuWoMv5PfRZHXPJDBVPnECyoXbF8+b89xHQgLUnr598S3uZEWNB2BcSEky2qjoaUqeJQeeD/AUDY1Y=
  file_glob: true
  file: 
    - ./**/*.log
    - opendatacon-*.sh
  name: "opendatacon_draft ${TRAVIS_TAG}"
  skip_cleanup: true
  draft: true
  overwrite: true
  on:
    branch: develop
    compiler: gcc    

