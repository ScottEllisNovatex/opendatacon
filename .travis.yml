#TODO: add socat dep for when dnp3 tests work

language: cpp

git:
  depth: false #shallow clone causes problem with tags
  
addons:
  apt:
    update: true

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

env:
  - BUILD_CONFIG=Release
  - BUILD_CONFIG=Debug
  
matrix:
  include: #extra matrix entries for docker builds
    #Rpi Release
    - env: BUILD_CONFIG=Release DOCKER_BUILD=Rpi
      services:
        - docker
    #Rpi Debug
    - env: BUILD_CONFIG=Debug DOCKER_BUILD=Rpi
      services:
        - docker
    #OEL6 Release
    - env: BUILD_CONFIG=Release DOCKER_BUILD=OEL
      services:
        - docker
    #OEL6 Debug
    - env: BUILD_CONFIG=Debug DOCKER_BUILD=OEL
      services:
        - docker
    #i686 Release
    - env: BUILD_CONFIG=Release DOCKER_BUILD=i386
      services:
        - docker
    #i686 Debug
    - env: BUILD_CONFIG=Debug DOCKER_BUILD=i386
      services:
        - docker
  exclude:
    #Travis docs say on osx gcc is an alias for clang anyway
    - os: osx
      compiler: clang

branches:
  only:
    - develop
    - master
    - /^release\/.*$/
    - /^[0-9]+\.[0-9]+\.[0-9]+.*$/

dist: xenial

install:
  - mkdir -p build/install && cd build
  - export INSTALL_PREFIX=$(pwd)/install
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew install libmodbus libmicrohttpd socat
      #export SYSVER_OPT="-DCMAKE_SYSTEM_VERSION=generic"
    elif [ -z "$DOCKER_BUILD" ]; then
      sudo apt-get install -y libmodbus-dev libmicrohttpd-dev socat libc++-dev libc++abi-dev python3.5 python3.5-dev
      export SYSVER_OPT="-DCMAKE_SYSTEM_VERSION=generic"
    fi
  - |
    if [ "$DOCKER_BUILD" == "Rpi" ]; then
      # Install qemu-static and the arm cross compiler into the travis host
      #
      sudo apt-get install -y qemu-user qemu-user-static gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
      # Get the platform include file needed by Python for armhf, and put it where it expects it to be!
      wget http://security.debian.org/debian-security/pool/updates/main/p/python3.5/libpython3.5-dev_3.5.3-1+deb9u1_armhf.deb
      dpkg -x libpython3.5-dev_3.5.3-1+deb9u1_armhf.deb libpython3.5-dev_3.5.3-1+deb9u1_armhf_extracted
      sudo cp -r libpython3.5-dev_3.5.3-1+deb9u1_armhf_extracted/usr/include/arm-linux-gnueabihf/ /usr/include/python3.5/arm-linux-gnueabihf/
      sudo cp -r libpython3.5-dev_3.5.3-1+deb9u1_armhf_extracted/usr/lib/arm-linux-gnueabihf/ /usr/lib/python3.5/config-3.5m-arm-linux-gnueabihf/
      #
      # Run the docker image and keep the returned container name for use in exec calls.
      # Run detatched, the volume command is -v hostdir:containerdir, -rm indicates cleanup on exit unnamed vols, 
      # -ti maintain a terminal, the docker image is jessie:latest
      DOCK=$(docker run -d -v $(pwd):/mnt/build -v /usr/bin/qemu-arm-static:/usr/bin/qemu-arm-static --rm -ti raspbian/jessie:latest)
      # Install the arm versions of dependencies into the QEMU user image
      docker exec -i $DOCK sh -c "apt-get update && apt-get install -y libmodbus-dev libmicrohttpd-dev socat psmisc" 
      mkdir sysroot
      # Copy /usr to sysroot int the docker image
      docker exec -i $DOCK cp -a /usr /mnt/build/sysroot/
      # Export a bunch of defines to travis to use in the build and run phases of the script section
      export SYSROOT=$(pwd)/sysroot/
      export RUN="docker exec --interactive --workdir /mnt/build $DOCK"
      export STOP="docker stop $DOCK"
      export TOOLCHAIN_OPT="-DCMAKE_TOOLCHAIN_FILE=../rpi-toolchain.cmake"
    fi
  - |
    if [ "$DOCKER_BUILD" == "OEL" ]; then
      DOCK=$(docker run -d -v $(pwd):/mnt/build --rm -ti library/oraclelinux:6.6)
      docker exec -i $DOCK sh -c '
        # load dependencies into docker image so that tests can be run
        curl -O http://packages.psychotic.ninja/6/plus/x86_64/RPMS//libmodbus-devel-3.0.6-2.el6.psychotic.x86_64.rpm
        curl -O http://packages.psychotic.ninja/6/plus/x86_64/RPMS//libmodbus-3.0.6-2.el6.psychotic.x86_64.rpm
        rpm -i libmodbus-3.0.6-2.el6.psychotic.x86_64.rpm
        rpm -i libmodbus-devel-3.0.6-2.el6.psychotic.x86_64.rpm     
        # To get Python3.5 we need the software collections repo, and scl tools. The final command is to activate Python2.5 in bash
        yum install -y oracle-softwarecollection-release-el6
        yum install -y scl-utils rh-python35
        scl enable rh-python35 bash
        #
        yum install -y libmicrohttpd-devel socat
       '
      sudo pip install gdown
      gdown "https://drive.google.com/uc?export=download&id=1GXu7aRCGviXEA3RM5slDKIC8yGIr4KW3"
      tar xzf x86_64-RHEL65-linux-gnu.tar.gz
      export EL6_CC=$(pwd)/x86_64-RHEL65-linux-gnu/bin/x86_64-RHEL65-linux-gnu-gcc
      export EL6_CXX=$(pwd)/x86_64-RHEL65-linux-gnu/bin/x86_64-RHEL65-linux-gnu-g++ 
      # Create a symlink to the x86_64-linux-gnu/python3.5m so the python include file can find it. This is in the Ubuntu build host.
      sudo ln -s /usr/include/x86_64-linux-gnu /usr/include/python3.5m/x86_64-linux-gnu
      mkdir sysroot
      docker exec -i $DOCK cp -a /usr /mnt/build/sysroot/
      export SYSROOT=$(pwd)/sysroot/
      export RUN="docker exec --interactive --workdir /mnt/build $DOCK"
      export STOP="docker stop $DOCK"
      export TOOLCHAIN_OPT="-DCMAKE_TOOLCHAIN_FILE=../el6-toolchain.cmake"
    fi
  - |
    if [ "$DOCKER_BUILD" == "i386" ]; then
      sudo dpkg --add-architecture i386
      sudo apt-get update
      sudo apt-get install -y lib32stdc++-5-dev libstdc++-5-dev:i386 libmodbus-dev:i386 libmicrohttpd-dev:i386 socat:i386 
      sudo apt-get install -y python3.5-minimal:i386 
      sudo apt-get install -y python3.5-dev:i386
      DOCK=$(docker run -d -v $(pwd):/mnt/build --rm -ti i386/ubuntu:xenial)
      export RUN="docker exec --interactive --workdir /mnt/build $DOCK"
      export STOP="docker stop $DOCK"
      export TOOLCHAIN_OPT="-DCMAKE_TOOLCHAIN_FILE=../i386-toolchain.cmake"
    fi

script:
  - cmake -DFULL=ON -DCMAKE_BUILD_TYPE=$BUILD_CONFIG -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX $TOOLCHAIN_OPT $SYSVER_OPT ..
  - make -j3
  - make package
  - make install
  - $RUN install/bin/ODC_tests -d yes
  - $RUN install/bin/DNP3Port_tests -d yes
  - $RUN install/bin/MD3Port_tests error -d yes
  - $RUN install/bin/CBPort_tests error -d yes
 # - $RUN install/bin/PyPort_tests error -d yes
  - $STOP

deploy:
  provider: releases
  api_key:
    secure: "a1Vm3l2QwXhwDoFpQn1Rw6BEL+gHHDlSAL5C43IWjr52qPRBL/qiQi9DBSrb4421M01QQtfxHOAxVs7bcM3oZ6oTeqy4vVHA3oqMhDtlVrt0Om4tlyLdY8kuSM/Hxm5G6WPYcgIj2ABMoX0PxpEftgrEtqa8E/cu8WkSP1Hmuv5RC5fJ+TmLHTTW7KxRSKZ9clmjWzRgLyrLYB+eS3HFfo64XW98XHkop9U+rb7+NQ9E4oZ9gVXmPYwEG805lNePAhyJ+EZ6NAMwY0HFeNj5JRt73EFtokYaLTW+drf7zUnptT9grquCpu16EbmEnUrgdJfUKjZHUAuBu6vYGLmM1SJ9PcS9+PGnGqhKyIZhSRFZCeCH5//gc3sh+Yp7NxT+6IrqsOKVitNoeiXykpk4MwCefuxvB5kDboxic8vxniSp+awnlzmwyKHP/aDCUANHpkQ+uNHnpA7Ev+zFeZnsDoDmcrzT39pWZav23ofP4c7H7MsgjQV/SWutHp91Bqs8AR2sBRpXl6FbLKIMrgXUQWd52lsSGWUUW042KddzGlfiWPV24P642AI40LbkPD1yD4FStH/KniA+9q0xvKeDqGqSB/8IrH0ZUxB/pCrHbsLl0R77Wi2PmYYIT+LGL58UxaJzMr+CyMTW05HH6/ruM4pUXzSMes7GC7cdJs2D/g8="
  file_glob: true
  file: opendatacon-*.*.*-*-*-*-*-*.sh
  name: "opendatacon ${TRAVIS_TAG}"
  skip_cleanup: true
  on:
    tags: true
    compiler: gcc
  
