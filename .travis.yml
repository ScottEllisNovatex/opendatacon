#TODO: add socat dep for when dnp3 tests work

language: cpp

git:
  depth: false #shallow clone causes problem with tags
  
addons:
  apt:
    update: true

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

env:
  - BUILD_CONFIG=Release
  - BUILD_CONFIG=Debug
  
matrix:
  include: #extra matrix entries for docker builds
    #Rpi Release
    - env: BUILD_CONFIG=Release DOCKER_BUILD=Rpi
      services:
        - docker
    #Rpi Debug
    - env: BUILD_CONFIG=Debug DOCKER_BUILD=Rpi
      services:
        - docker
    #OEL7 Release
    - env: BUILD_CONFIG=Release DOCKER_BUILD=OEL
      services:
        - docker
    #OEL7 Debug
    - env: BUILD_CONFIG=Debug DOCKER_BUILD=OEL
      services:
        - docker
    #i686 Release
    - env: BUILD_CONFIG=Release DOCKER_BUILD=i386
      services:
        - docker
    #i686 Debug
    - env: BUILD_CONFIG=Debug DOCKER_BUILD=i386
      services:
        - docker
  exclude:
    #Travis docs say on osx gcc is an alias for clang anyway
    - os: osx
      compiler: clang

branches:
  only:
    - develop
    - master
    - /^release\/.*$/
    - /^[0-9]+\.[0-9]+\.[0-9]+.*$/
    - /^feature\/.*$/

dist: bionic

install:
  - export SRC_DIR=$(pwd)
  - mkdir -p build/install && cd build
  - export INSTALL_PREFIX=$(pwd)/install
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      HOMEBREW_NO_AUTO_UPDATE=1 brew install libmodbus libmicrohttpd socat
      export TOOLCHAIN_OPT="-DPACKAGE_DNP3=OFF -DPACKAGE_LIBMICROHTTPD=OFF -DPACKAGE_LIBMODBUS=OFF -DPACKAGE_PYTHON=OFF"
    elif [ -z "$DOCKER_BUILD" ]; then
      # Not a docker build, just normal linux
      sudo apt-get install -y libmodbus-dev libmicrohttpd-dev socat libc++-dev libc++abi-dev python3.6 python3.6-dev
      export SYSVER_OPT="-DCMAKE_SYSTEM_VERSION=generic"
    fi
  - |
    if [ "$DOCKER_BUILD" == "Rpi" ]; then
      # Install qemu-static and the arm cross compiler into the travis host
      #
      sudo apt-get install -y qemu-user qemu-user-static g++-arm-linux-gnueabihf
      #
      # Run the docker image and keep the returned container name for use in exec calls.
      # Run detatched, the volume command is -v hostdir:containerdir, -rm indicates cleanup on exit unnamed vols, 
      # -ti maintain a terminal, the docker image is jessie:latest
      DOCK=$(docker run -d -v $(pwd):/mnt/build -v /usr/bin/qemu-arm-static:/usr/bin/qemu-arm-static --rm -ti raspbian/jessie:latest)
      # Install the arm versions of dependencies into the QEMU user image
      docker exec -i $DOCK sh -c "apt-get update && apt-get install -y libmodbus-dev libmicrohttpd-dev socat psmisc libc6-dev" 
      docker exec -i $DOCK sh -c "apt-get install -y python3.4 python3.4-dev" 
      mkdir sysroot
      # Copy headers and libs to sysroot from within the docker image
      docker exec -i $DOCK sh -c '
        mkdir -p /mnt/build/sysroot$(dirname /usr/include/*/*/pyconfig.h)
        cp -a /usr/include/*/*/pyconfig.h /mnt/build/sysroot$(dirname /usr/include/*/*/pyconfig.h)
        cp -a /usr/include/microhttpd.h /mnt/build/sysroot/usr/include/
        cp -a /usr/include/modbus /mnt/build/sysroot/usr/include/
        cp -a /usr/include/python* /mnt/build/sysroot/usr/include/
        cp -a /usr/lib /mnt/build/sysroot/usr/
        cp -a /lib* /mnt/build/sysroot/
      '
      # make symlink so absolute paths work within docker
      docker exec -i $DOCK mkdir -p $(dirname $SRC_DIR)
      docker exec -i $DOCK ln -s /mnt $SRC_DIR
      # replace ldd with docker wrapper (so BundleUtilities might work)
      sudo ln -sf $SRC_DIR/lddrunwrapper.pl $(which ldd) 
      # Export a bunch of defines to travis to use in the build and run phases of the script section
      export SYSROOT=$(pwd)/sysroot/
      export RUN="docker exec --interactive --workdir /mnt/build $DOCK"
      export STOP="docker stop $DOCK"
      export TOOLCHAIN_OPT="-DCMAKE_TOOLCHAIN_FILE=../rpi-toolchain.cmake -DCMAKE_CROSSCOMPILING_EMULATOR=$SRC_DIR/runwrapper"
    fi
  - |
    if [ "$DOCKER_BUILD" == "OEL" ]; then
      DOCK=$(docker run -d -v $SRC_DIR:/mnt/src --rm -ti library/oraclelinux:7.6)
      
      # load dependencies into docker image
      docker exec -i $DOCK sh -c '
        yum install -y oracle-softwarecollection-release-el7
        /usr/bin/ol_yum_configure.sh
        yum repolist
        yum install -y applydeltarpm
        yum install -y scl-utils glibc-devel iso-codes redhat-rpm-config libmicrohttpd make devtoolset-8-gcc-c++ cmake3 git file
        ln -s /usr/bin/cmake3 /bin/cmake
        
        #Extras that aren-t yum-able
        curl -O http://packages.psychotic.ninja/7/plus/x86_64/RPMS//libmodbus-devel-3.0.6-2.el7.psychotic.x86_64.rpm
        curl -O http://packages.psychotic.ninja/7/plus/x86_64/RPMS//libmodbus-3.0.6-2.el7.psychotic.x86_64.rpm
        rpm -i libmodbus-3.0.6-2.el7.psychotic.x86_64.rpm
        rpm -i libmodbus-devel-3.0.6-2.el7.psychotic.x86_64.rpm     
        # To get Python3.6 we need scl-util-build tools
        curl -O http://public-yum.oracle.com/repo/OracleLinux/OL7/optional/developer/x86_64/getPackage/scl-utils-build-20130529-19.el7.x86_64.rpm
        rpm -i scl-utils-build-20130529-19.el7.x86_64.rpm
        curl -O https://public-yum.oracle.com/repo/OracleLinux/OL7/optional/latest/x86_64/getPackage/libmicrohttpd-devel-0.9.33-2.el7.x86_64.rpm
        rpm -i libmicrohttpd-devel-0.9.33-2.el7.x86_64.rpm
        
        yum install -y rh-python36 rh-python36-python-devel
      ' 
      #Set up mirror paths inside the docker - so it-s the same command to run tests as other configs
      docker exec -i $DOCK mkdir -p $(dirname $SRC_DIR)
      docker exec -i $DOCK ln -s /mnt/src $SRC_DIR
      
      export TOOLCHAIN_OPT="-DPYTHON_HOME=/opt/rh/rh-python36/root/usr"
      export SYSVER_OPT="-DCMAKE_SYSTEM_VERSION=oel7"
      export PRESOURCE="source scl_source enable rh-python36 && source scl_source enable devtoolset-8 &&"
      export RUN="docker exec --interactive --workdir /mnt/src/build $DOCK"
      export BUILDRUN="$RUN"
      export STOP="docker stop $DOCK"
    fi
  - |
    if [ "$DOCKER_BUILD" == "i386" ]; then
      sudo apt-get update
      sudo apt-get install -y g++-7-i686-linux-gnu
      DOCK=$(docker run -d -v $(pwd):/mnt/build --rm -ti i386/ubuntu:xenial)
      docker exec -i $DOCK sh -c "apt-get update && apt-get install -y libmodbus-dev libmicrohttpd-dev socat psmisc libc6-dev" 
      docker exec -i $DOCK sh -c "apt-get install -y python3.5 python3.5-dev" 
      mkdir sysroot
      # Copy headers and libs to sysroot from within the docker image
      docker exec -i $DOCK sh -c '
        mkdir -p /mnt/build/sysroot$(dirname /usr/include/*/*/pyconfig.h)
        rm /usr/lib/python3.5/sitecustomize.py
        cp /etc/python3.5/sitecustomize.py /usr/lib/python3.5/sitecustomize.py
        cp -a /usr/include/*/*/pyconfig.h /mnt/build/sysroot$(dirname /usr/include/*/*/pyconfig.h)
        cp -a /usr/include/microhttpd.h /mnt/build/sysroot/usr/include/
        cp -a /usr/include/modbus /mnt/build/sysroot/usr/include/
        cp -a /usr/include/python* /mnt/build/sysroot/usr/include/
        cp -a /usr/lib /mnt/build/sysroot/usr/
        cp -a /lib* /mnt/build/sysroot/
      '
      sudo chown -R $USER.$USER sysroot
      # make symlink so absolute paths work within docker
      docker exec -i $DOCK mkdir -p $(dirname $SRC_DIR)
      docker exec -i $DOCK ln -s /mnt $SRC_DIR
      # replace ldd with docker wrapper (so BundleUtilities might work)
      sudo ln -sf $SRC_DIR/lddrunwrapper.pl $(which ldd) 
      # Export a bunch of defines to travis to use in the build and run phases of the script section
      export SYSROOT=$(pwd)/sysroot/
      export RUN="docker exec --interactive --workdir /mnt/build $DOCK"
      export STOP="docker stop $DOCK"
      export TOOLCHAIN_OPT="-DCMAKE_TOOLCHAIN_FILE=../i386-toolchain.cmake -DCMAKE_CROSSCOMPILING_EMULATOR=$SRC_DIR/runwrapper"
    fi

script:
  - $BUILDRUN sh -c "$PRESOURCE cmake -DFULL=ON -DCMAKE_BUILD_TYPE=$BUILD_CONFIG -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX $TOOLCHAIN_OPT $SYSVER_OPT .."
  - $BUILDRUN sh -c "$PRESOURCE make -j3"
  - $BUILDRUN sh -c "$PRESOURCE make package"
  - $BUILDRUN sh -c "$PRESOURCE make install"
  - $RUN install/bin/ODC_tests -d yes
  - $RUN install/bin/DNP3Port_tests -d yes
  - $RUN install/bin/SimPort_tests -d yes
  - $RUN install/bin/MD3Port_tests error -d yes
  - $RUN install/bin/CBPort_tests error -d yes
  - $RUN install/bin/PyPort_tests error -d yes
  - $STOP

deploy:
  # Only do a git deploy on a tagged release.
  provider: releases
  api_key:
    secure: "a1Vm3l2QwXhwDoFpQn1Rw6BEL+gHHDlSAL5C43IWjr52qPRBL/qiQi9DBSrb4421M01QQtfxHOAxVs7bcM3oZ6oTeqy4vVHA3oqMhDtlVrt0Om4tlyLdY8kuSM/Hxm5G6WPYcgIj2ABMoX0PxpEftgrEtqa8E/cu8WkSP1Hmuv5RC5fJ+TmLHTTW7KxRSKZ9clmjWzRgLyrLYB+eS3HFfo64XW98XHkop9U+rb7+NQ9E4oZ9gVXmPYwEG805lNePAhyJ+EZ6NAMwY0HFeNj5JRt73EFtokYaLTW+drf7zUnptT9grquCpu16EbmEnUrgdJfUKjZHUAuBu6vYGLmM1SJ9PcS9+PGnGqhKyIZhSRFZCeCH5//gc3sh+Yp7NxT+6IrqsOKVitNoeiXykpk4MwCefuxvB5kDboxic8vxniSp+awnlzmwyKHP/aDCUANHpkQ+uNHnpA7Ev+zFeZnsDoDmcrzT39pWZav23ofP4c7H7MsgjQV/SWutHp91Bqs8AR2sBRpXl6FbLKIMrgXUQWd52lsSGWUUW042KddzGlfiWPV24P642AI40LbkPD1yD4FStH/KniA+9q0xvKeDqGqSB/8IrH0ZUxB/pCrHbsLl0R77Wi2PmYYIT+LGL58UxaJzMr+CyMTW05HH6/ruM4pUXzSMes7GC7cdJs2D/g8="
  file_glob: true
  file: opendatacon-*.*.*-*-*-*-*-*.sh
  name: "opendatacon ${TRAVIS_TAG}"
  skip_cleanup: true
  on:
    tags: true
    compiler: gcc
  
