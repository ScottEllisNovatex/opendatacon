
#include <catch.hpp>
#include <map>
#include <fstream>
#include <filesystem>

inline bool WriteFile(const std::string& name, size_t size)
{
	std::ofstream fout(name, std::ios::binary);
	if(fout.fail())
		return false;
	size_t i = 0;
	while(i++ < size && fout)
		fout<<uint8_t(rand()%255);
	if(fout.fail())
		return false;
	fout.flush();
	fout.close();
	return true;
}

void WriteConfMap(const std::map<const char*,const char*> conf_map, const bool init)
{
	if(init)
	{
		for(auto conf_pair : conf_map)
		{
			std::ofstream fconf(conf_pair.first);
			REQUIRE_FALSE(fconf.fail());
			fconf << conf_pair.second;
			fconf.close();
		}
	}
	else
		for(auto conf_pair : conf_map)
			std::remove(conf_pair.first);
}

void PrepReloadConfFiles(bool init)
{
	static std::map<const char*,const char*> conf_map;

	conf_map["DNP3_A.conf"] =  R"001(@DNP3_A_conf@)001";
	conf_map["DNP3_B.conf"] =  R"001(@DNP3_B_conf@)001";
	conf_map["extra_points.conf"] =  R"001(@extra_points_conf@)001";
	conf_map["offsets.conf"] =  R"001(@offsets_conf@)001";
	conf_map["opendatacon_changed_conn.conf"] =  R"001(@opendatacon_changed_conn_conf@)001";
	conf_map["opendatacon_changed_port.conf"] =  R"001(@opendatacon_changed_port_conf@)001";
	conf_map["opendatacon_change_everything.conf"] =  R"001(@opendatacon_change_everything_conf@)001";
	conf_map["opendatacon.conf"] =  R"001(@opendatacon_conf@)001";
	conf_map["opendatacon_dangling.conf"] =  R"001(@opendatacon_dangling_conf@)001";
	conf_map["opendatacon_removed_conn.conf"] =  R"001(@opendatacon_removed_conn_conf@)001";
	conf_map["opendatacon_removed_plugin.conf"] =  R"001(@opendatacon_removed_plugin_conf@)001";
	conf_map["opendatacon_removed_port.conf"] =  R"001(@opendatacon_removed_port_conf@)001";
	conf_map["points.conf"] =  R"001(@points_conf@)001";

	WriteConfMap(conf_map, init);
}

void PrepTransferFiles(bool init)
{
	static std::map<const char*,const char*> conf_map;

	conf_map["transfer.conf"] =  R"001(@transfer_conf@)001";

	if(init)
	{
		WriteFile("transfer1.dat",100001);
		WriteFile("transfer2.dat",200002);
		WriteFile("transfer3.dat",300003);
		std::filesystem::create_directories(std::filesystem::path("RX"));
	}
	else
	{
		std::remove("RX/transfer1.dat");
		std::remove("RX/transfer2.dat");
		std::remove("RX/transfer3.dat");
		std::remove("RX/transfer.conf");
	}

	WriteConfMap(conf_map, init);
}


