{
// This example connects a JSON port to a PyPort. The Python code that is connected to the PyPort is
// designed to simulate everything connected to an RTU.
// It will respond to commands from ODC events that can be sent in via the JSON port.
// It will also respond to commands on the PyPort restful interface.
// This can be used to control the equipment or to check its current state.

	"LogFileSizekB"	: 50000,
	"LogName" :	"ODCLog.txt",
	"NumLogFiles":	1,
	"LogLevel":	"debug",

	"SyslogLog" :
	{
		"Host" : "127.0.0.1",
		"LogLevel":	"trace",
		"Port" : 514
	},
	"TCPLog":
	{
			"IP" : "127.0.0.1",
			"Port" : 12345,
			"LogLevel":	"debug",
			"TCPClientServer" : "CLIENT"
	},

	"Plugins" :
	[
		{
			"Name" : "ConsoleUI-1",
			"Type" : "ConsoleUI",
			"Library" : "ConsoleUI",
			"ConfFilename" : "",
			"ConfOverrides" : { }
		},
		{
			"Name" : "WebUI-1",
			"Type" : "WebUI",
			"Library" : "WebUI",
			"ConfFilename" : "",
			"ConfOverrides" : { "IP" : "0.0.0.0", "Port" : 10443 }
		}
	],

	"Ports" :
	[
		{
			"Name" : "PyPortRtuSim",
			// This name is used in the restful interface.
			// We have Equipment Types:
			// Analog - with mean/std deviation/update rate (as per Neils sim)
			// Single Pole Digital (with/without feedback),
			// Cicuit Breakers (Dual Pole Digital) with Trip/Close controls,
			// Tap changers (either reporting as Analog or BCD - 4 to 8 binary bits) with Tap Up/Down controls.
			// Every simulation/equipment has a type and number entry to identify it. The number can just be a unique number.
			// Binaries have a BitID to be used to map the bits.
			// Controls have a Command field to identify what the control does Trip/Close/TapUp/TapDown/Set/Reset
			// The Value field is the starting state of the element.
			//
			// To set an equipment value send a POST http://localhost:10000/PyPortRtuSim/set with
			// JSON {"Type" : "CB", "Number" : 1, "State" : "Open"/"Closed"/"FaultZeros"/"FaultOnes" }
			// To read the bits do a GET http://localhost:10000/PyPortRtuSim/status?CBNumber=1
			//
			"Type" : "Py",
			"Library" : "PyPort",
			"ConfFilename" : "",
			"ConfOverrides" :
			{
				"IP" : "localhost",
				"Port" : 10000,

				// Python Module (filename without extension)/Class/Method name definitions
				"ModuleName" : "PyPortRtuSim",
				"ClassName": "SimPortClass",

				// The point definitions are only proccessed by the Python code. Any events sent to PyPort by ODC will be passed on.
				// Note ranges are not supported (unlike ODC which supports ranges)
				"Analogs" :
				[
					{"Index": 0, "Type" : "Sim", "Mean" : 500, "StdDev" : 1.2, "UpdateIntervalms" : 60000, "Value": 1024 },
					{"Index": 1, "Type" : "TapChanger", "Number" : 1, "Value": 6}
				]
				,
				"Binaries" :
				[
					// CB do we need to be able to have inverted bits? Probably?
					{"Index": 0, "Type" : "CB", "Number" : 1, "BitID" : 0, "Value": 0},	// Half of a dual bit binary Open 10, Closed 01, Maintenance 00 or Fault 11
					{"Index": 1, "Type" : "CB", "Number" : 1, "BitID" : 1, "Value": 1},	// Half of a dual bit binary. State is starting state.

					{"Index": 2, "Type" : "TapChanger", "Number" : 2, "BitID" : 0, "Value": 0},
					{"Index": 3, "Type" : "TapChanger", "Number" : 2, "BitID" : 1, "Value": 0},
					{"Index": 4, "Type" : "TapChanger", "Number" : 2, "BitID" : 2, "Value": 1},
					{"Index": 5, "Type" : "TapChanger", "Number" : 2, "BitID" : 3, "Value": 0},

					{"Index": 6, "Type" : "Sim", "Value": 0}
				]
				,
				"BinaryControls" :
				[
					{"Index": 0, "Type" : "CB", "Number" : 1, "Command":"Trip"},
					{"Index": 1, "Type" : "CB", "Number" : 1, "Command":"Close"},
					{"Index": 2, "Type" : "TapChanger", "Number" : 1, "FB": "ANA", "Max": 32, "Command":"TapUp"},	// Max defined for TapUp
					{"Index": 3, "Type" : "TapChanger", "Number" : 1, "FB": "ANA", "Min": 0, "Command":"TapDown"},	// Min defined for TapDown - saves searching
					{"Index": 4, "Type" : "TapChanger", "Number" : 2, "FB": "BCD", "Max": 15, "Command":"TapUp"},
					{"Index": 5, "Type" : "TapChanger", "Number" : 2, "FB": "BCD", "Min": 1, "Command":"TapDown"}
				]
			}
		}
		,
		{
			"Name" : "JSON",
			"Type" : "JSONServer",
			"Library" : "JSONPort",
			"ConfFilename" : "",
			"ConfOverrides" :
			{
				"IP" : "127.0.0.1", "Port" : 2598,
				"JSONPointConf" :
				[
					{
						"PointType" : "Binary",
						"Points" :
						[
							{"Index": 0},
							{"Index": 1}
						]
					},
					{
						"PointType" : "Control",
						"Points" :
						[
							// Expect control like {"controls": {"0" : "P"}}
							{
								"Index": 0,
								"JSONPath" : ["controls","0"],
								"ControlMode" : "PULSE"
							},
							{
								"Index": 1,
								"JSONPath" : ["controls","1"],
								"ControlMode" : "PULSE"
							}
						]
					}
				]
			}
		}
		,
		{
			"Name" : "Null",
			"Type" : "Null",
			"ConfFilename" : "/dev/null"
		}
	]
	,
	"Connectors" :
	[
		{
			"Name" : "Connector1",
			"ConfFilename" : "",
			"ConfOverrides" :
			{
				"Connections" :
				[
					{
						"Name" : "Connection1",
						"Port1" : "PyPortCBSim",
						"Port2" : "JSON"
					}
				]
			}
		}
	]
}
